/* app/globals.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  @apply bg-gray-100;
  background-color: #f0f4f8;
  background-image: url('/bg-image.webp');
  background-size: cover;
  background-position: center;
  font-family: 'Inter', sans-serif;
  padding: 0;
  margin:0;
}

input:-webkit-autofill {
  background-color: transparent !important;
  transition: background-color 1000s ease-in-out 0s;
  color: inherit;
}

.register {
  @apply w-full mt-5 mb-1 p-2 border-none focus:bg-slate-200 shadow-md text-[#323338] font-medium placeholder:text-[0.9rem] focus:outline-none ;
}

@keyframes subtle-gradient-animation {
  0% {background-position: 0% 50%;}

  50% {background-position: 100% 50%;}

  100% {background-position: 0% 50%;}
}

/* ✅ Custom Subtle Gradient */
.subtle {
  background: linear-gradient(45deg, 
  #38b000, #7fb600, #ffcc00);
  animation: subtle-gradient-animation 6s infinite ease-in-out;
}


/*

'use client';

import React, { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import useAuth from '@/hooks/useAuth';
import Sidebar from '../components/sidebar';
import Navbar from '../components/navbar';
import axios from 'axios';
import { Line } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
} from 'chart.js';

// Register Chart.js components
ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
);

const Dashboard = () => {
  const router = useRouter();
  const { isAuthenticated, isLoading } = useAuth();
  const [graphData, setGraphData] = useState(null);
  const [metrics, setMetrics] = useState({
    currentPatients: 0,
    maxbed:20, // Initialize with 0
    bedAvailability: 0,
    erStatus: 'Moderate',
    staffAvailability: 'High',
  });

  // Fetch graph data from the backend
  useEffect(() => {
    const fetchGraphData = async () => {
      try {
        const response = await fetch('http://localhost:5000/graph-data');
        const data = await response.json();
        setGraphData(data);
      } catch (error) {
        console.error('Error fetching graph data:', error);
      }
    };

    fetchGraphData();
  }, []);
  

  useEffect(() => {
    const fetchAdmittedPatients = async () => {
      try {
        const response = await fetch('http://localhost:5002/admitted-patients'); // Ensure this matches the backend port
        if (!response.ok) {
          throw new Error(HTTP error! Status: ${response.status});
        }
        const data = await response.json();
        setMetrics((prevMetrics) => ({
          ...prevMetrics,
          currentPatients: data.num_admitted_patients,
          bedAvailability: metrics.maxbed-data.num_admitted_patients,
                    
        }));
      } catch (error) {
        console.error('Error fetching admitted patients:', error);
      }
    };
  
    fetchAdmittedPatients();
  }, []);
  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-100 flex items-center justify-center">
        <div className="text-2xl font-semibold text-[#245370]">Loading...</div>
      </div>
    );
  }

  if (!isAuthenticated) {
    return null;
  }

  // Chart.js data configuration
  const chartData = {
    labels: graphData ? graphData.hours : [],
    datasets: [
      {
        label: 'Patient Count',
        data: graphData ? graphData.patient_counts : [],
        borderColor: 'rgb(15, 57, 223)',
        backgroundColor: 'rgba(1, 23, 188, 0.2)',
        borderWidth: 2,
        pointRadius: 5,
        pointBackgroundColor: 'rgb(49, 9, 229)',
      },
    ],
  };

  // Chart.js options
 const chartOptions = {
  responsive: true,
  maintainAspectRatio: false,
  plugins: {
    title: {
      display: true,
      text: Patient Count Over Time - ${new Date().toISOString().split('T')[0]},
      font: { size: 16 },
    },
  },
  scales: {
    x: {
      title: {
        display: true,
        text: 'Time (Hours)',
      },
      grid: { display: true },
    },
    y: {
      title: {
        display: true,
        text: 'Patient Count',
      },
      min: 0,  // Explicitly set the minimum value of the y-axis
      max: 20, // Explicitly set the maximum value of the y-axis
      ticks: {
        stepSize: 2,  // Change stepSize to 2 for increments of 2
        callback: (value) => {
          if (value % 1 === 0) {  // Only display whole numbers
            return value;
          }
        },
      },
      grid: { display: true },
    },
  },
};
  

  return (
    <div className="min-h-screen bg-opacity-90 backdrop-blur-sm bg-blue-100 overflow-x-hidden">
      <div className="flex min-h-screen w-full bg-blue-100">

        <Sidebar />

        
        <div className="flex-1 flex flex-col">
          <div>
            <Navbar />
          </div>

          <div>
            <h2 className="text-gray-600 font-sans font-bold text-[2rem]">ER Dashboard</h2>
          </div>

          <div className="opacity-85 text-black p-8 grid grid-cols-2 sm:grid-cols-2 md:grid-cols-4 gap-4">

            {[
              { name: 'Current ER Patients', value: metrics.currentPatients},
              { name: 'Bed Availability', value: metrics.bedAvailability },
              { name: 'ER Status', value: metrics.erStatus},
              { name: 'Staff Availability', value: metrics.staffAvailability},
            ].map((item, index) => (
              <button
                key={index}
                className="flex flex-col bg-gray-50 h-30 w-[15vw] justify-between items-center p-8 rounded-2xl transition-all duration-200 shadow-lg border-x-2 border-y-8 border-[#e19494] backdrop-blur-xl"
              >
                <span className="text-[1.1rem] font-medium">{item.name}</span>
                <span className="text-lg font-bold">{item.value}</span>
              </button>
            ))}
          </div>

         
          <div className="p-6 flex flex-col flex-wrap gap-4">
         
            <div className="col-span-2 bg-white p-4 w-[70vw] rounded-lg shadow-md">
              <h2 className="text-blue-800 text-xl font-bold mb-4">ER TRENDS</h2>
              <div className="bg-gray-100 p-2 w-full h-[300px] sm:h-[400px]">

                {graphData ? (
                  <Line data={chartData} options={chartOptions} style={{ width: '200%', height: '400px' }} />
                ) : (
                  <div className="flex items-center justify-center h-full">
                    <span className="text-gray-500">Loading graph...</span>
                  </div>
                )}
              </div>
            </div>


           
            <div className="col-span-3 bg-white p-4 rounded-lg shadow-md mt-4">
              <h2 className="text-blue-800 text-xl font-bold mb-4">Patient Details</h2>
              <div className="h-[300px] bg-gray-200 rounded-lg flex items-center justify-center">
              <div className="overflow-x-auto">
              <table className="w-full text-sm md:text-base border-collapse border border-gray-300">

                    <thead>
                     <tr>
                      <th>Patient_ID</th>
                      <th>Hospital_ID</th>
                      <th>Urban_Rural</th>
                      <th>Gender</th>
                      <th>Age</th>
                      <th>Blood_Group</th>
                      <th>Triage_Level</th>
                      <th>Factor</th>
                      <th>Entry_Date</th>
                      <th>Entry_Time</th>
                      <th>Leave_Date</th>
                      <th>Leave_Tim</th>
                     </tr>
                    </thead>
                    <tbody>
                      <tr>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                      </tr>

                      <tr>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                      </tr>

                      <tr>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                      </tr>
                    </tbody>
                    
                  </table>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      
      <footer className="bg-gray-800 text-white text-center py-3">
        © {new Date().getFullYear()} ER Management Portal. All rights reserved.
      </footer>
    </div>
  );
};

export default Dashboard;
*/